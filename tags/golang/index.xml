<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 无聊博客</title><link>https://blog.5a6c.me/tags/golang/</link><description>Recent content in golang on 无聊博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 26 Jan 2022 05:05:14 +0800</lastBuildDate><atom:link href="https://blog.5a6c.me/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>无限大小 http 压缩炸弹原理与实现</title><link>https://blog.5a6c.me/posts/simple-http-compress-bomb/</link><pubDate>Wed, 26 Jan 2022 05:05:14 +0800</pubDate><guid>https://blog.5a6c.me/posts/simple-http-compress-bomb/</guid><description>前段时间看到了一个使用gzip炸弹来进行反爬虫的思路，利用对空字节的高压缩比来消耗爬虫的内存资源，感觉比较有意思，于是自己手动实现了一下。 基本思路 客户端（浏览器、爬虫）在发起HTTP请求时，会在HTT</description></item><item><title>使用 golang 撸一个反向 socks5 代理</title><link>https://blog.5a6c.me/posts/build-a-reverse-proxy-use-golang/</link><pubDate>Sat, 03 Jul 2021 17:05:57 +0800</pubDate><guid>https://blog.5a6c.me/posts/build-a-reverse-proxy-use-golang/</guid><description>1.socks5代理 关于使用 Golang 做一个常规的 socks5 代理的文章, 网上已经有很多, 所以本次来尝试一种特殊情况, 即在目标机器不出网的情况下, 使用 Golang 实现一个反向的 socks5 隧道. 2.工具的基本原理 反向 socks5 与正向的 socks5 所不同的地</description></item><item><title>将 V2ray 订阅链接转换为 config 文件</title><link>https://blog.5a6c.me/posts/v2ray-subscribe-to-config/</link><pubDate>Wed, 02 Oct 2019 17:05:57 +0800</pubDate><guid>https://blog.5a6c.me/posts/v2ray-subscribe-to-config/</guid><description>1.请求并解码 大多数订阅链接都是base64编码过的, 所以首先使用net/http中的Get()方法请求订阅链接, 获得base64编码后进行解码, 得到vmess://xxx格式的订阅链接 简单写一个方法</description></item></channel></rss>